fn read_uint8($f) {
    ret(fgetc($f))
}

fn read_uint16($f) {
    $r = fgetc($f)
    $r + (fgetc($f) << 8)
    ret($r)
}

fn read_uint32($f) {
    $r = fgetc($f)
    $r + (fgetc($f) << 8)
    $r + (fgetc($f) << 16)
    $r + (fgetc($f) << 24)
    ret($r)
}

fn put_uint8($f, $val) {
    fputc($val, $f)
}

fn put_uint16($f, $val) {
    fputc($val & 0xff, $f)
    fputc(($val >> 8) & 0xff, $f)
}

fn put_uint32($f, $val) {
    fputc($val & 0xff, $f)
    fputc(($val >> 8) & 0xff, $f)
    fputc(($val >> 16) & 0xff, $f)
    fputc(($val >> 24) & 0xff, $f)
}

fn load_file($path) {
    $f = fopen($path, "rb")
    if ($f == 0) {
        ret("Cannot open file")
    }

    $magic = new(6, 1, INT8)
    fread($magic, 6, $f)

    if (strcmp($magic, "Org-02") != 0 && strcmp($magic, "Org-03") != 0) {
        fclose($f)
        ret("Unsupported Organya version, or not an Organya file at all")
    }

    $org = new()

    $org.wait = read_uint16($f)
    $org.line = read_uint8($f)
    $org.dot = read_uint8($f)
    $org.rpt_a = read_uint32($f)
    $org.rpt_b = read_uint32($f)

    $tracks = new(16, 1, INT32)
    $i = 0
    while ($i < 16) {
        $t = new()
        $t.freq = read_uint16($f)
        $t.instr = read_uint8($f)
        $t.pipi = read_uint8($f)
        $t.note_cnt = read_uint16($f)
        $tracks[$i] = $t
        $i + 1
    }

    $i = 0
    while ($i < 16) {
        $t = $tracks[$i]
        $n = $t.note_cnt

        // Create list
        $l = new($n, 1, INT32)
        $j = 0
        while ($j < $n) {
            $l[$j] = new()
            $j + 1
        }

        // Read data
        $j = 0
        while ($j < $n) {
            $l[$j].x = read_uint32($f)
            $j + 1
        }
        $j = 0
        while ($j < $n) {
            $l[$j].y = read_uint8($f)
            $j + 1
        }
        $j = 0
        while ($j < $n) {
            $l[$j].len = read_uint8($f)
            $j + 1
        }
        $j = 0
        while ($j < $n) {
            $l[$j].vol = read_uint8($f)
            $j + 1
        }
        $j = 0
        while ($j < $n) {
            $l[$j].pan = read_uint8($f)
            $j + 1
        }

        $t.note_list = $l
        $i + 1
    }

    $org.tracks = $tracks
    $org.succeeded = 1

    fclose($f)
    ret($org)
}

fn save_file($path) {
    $f = fopen($path, "wb")
    if ($f == 0) {
        ret("Cannot open file")
    }

    fputs("Org-03", $f)
    put_uint16($f, tick_len)
    put_uint8($f, roll_bar div roll_beat)
    put_uint8($f, roll_beat)
    put_uint32($f, roll_rpt_a)
    put_uint32($f, roll_rpt_b + 1)

    $i = 0
    while ($i < 16) {
        put_uint16($f, tunings[$i])
        put_uint8($f, instruments[$i])
        put_uint8($f, 0)
        put_uint16($f, roll_tracks[$i].cnt)
        $i + 1
    }

    $i = 0
    while ($i < 16) {
        $t = roll_tracks[$i]
        $n = $t.cnt

        $j = 0
        while ($j < $n) {
            put_uint32($f, $t[$j].x)
            $j + 1
        }
        $j = 0
        while ($j < $n) {
            put_uint8($f, $t[$j].y)
            $j + 1
        }
        $j = 0
        while ($j < $n) {
            put_uint8($f, $t[$j].len)
            $j + 1
        }
        $j = 0
        while ($j < $n) {
            put_uint8($f, $t[$j].vol)
            $j + 1
        }
        $j = 0
        while ($j < $n) {
            put_uint8($f, $t[$j].pan)
            $j + 1
        }

        $i + 1
    }

    fclose($f)
}

current_path = -1

fn menu_new_file() {
    roll_clear()
    roll_init_history()

    roll_bar = 16
    roll_beat = 4
    tsigidx = 0
    tick_len = 100
    reset_instruments()

    if (current_path != -1) {
        remove(current_path)
        current_path = -1
    }

    send_notif("All reset", nord15)
}

fn display_file_notif($prompt) {
    $s = new(1, 1, INT8)
    clean($s)
    strcat($s, $prompt)
    $path = current_path
    $i = strlen($path) - 1
    while ($i >= 0 && $path[$i] != '/' && $path[$i] != '\\') { $i - 1 }
    strcat($s, strlen($s), $path, $i + 1)
    send_notif($s, nord14)
    remove($s)
}

fn menu_open_file() {
    if (current_path != -1 && roll_shift) {
        $path = current_path
        $msg = "Reloaded: "
    } else {
        $path = file_dialog("Open", "org", "tilde_fdialogstate")
        $msg = "Loaded: "
    }
    if ($path != -1) {
        $result = load_file($path)
        current_path = $path
        if ($result.succeeded) {
            popularize_editor($result)
            display_file_notif($msg)
        } else {
            send_notif($result, nord11)
        }
    }
}

fn menu_save_file() {
    $path = current_path
    if ($path == -1 || roll_shift) {
        $title = "Save As"
        if ($path == -1) { $title = "Save" }
        $path = file_dialog($title, "org", "tilde_fdialogstate")
    }
    if ($path != -1) {
        save_file($path)
        current_path = $path
        display_file_notif("Saved: ")
    }
}

last_save = 0

fn boot_workspace() {
    $result = load_file("2:/tilde_workspace.org")
    if ($result.succeeded) {
        // Load the saved workspace
        popularize_editor($result)
        send_notif("Welcome back ^ ^", nord12)
    } else {
        // Most probably first-time bootup
        send_notif("This is tilde-seq. Nice to meet you!", nord12)
    }
}

fn try_autosave($forced) {
    $t = get_timer(0)
    // Save every minute
    if ($forced || last_save < $t - 60000) {
        save_file("2:/tilde_workspace.org")
        last_save = $t
        ret(1)
    } else {
        ret(0)
    }
}

fn popularize_editor($org) {
    roll_clear()
    roll_no_history = 1

    roll_bar = $org.line * $org.dot
    roll_beat = $org.dot

    roll_rpt_a = $org.rpt_a
    roll_rpt_b = $org.rpt_b - 1

    $i = 0
    while ($i < 16) {
        roll_ctrl = 0

        $n = $org.tracks[$i].note_cnt
        $l = $org.tracks[$i].note_list
        $j = 0
        while ($j < $n) {
            $note = $l[$j]
            add_note($i, $note.x, $note.y, $note.len, $note.vol, $note.pan)
            $j + 1
        }

        tunings[$i] = $org.tracks[$i].freq
        instruments[$i] = $org.tracks[$i].instr
        $i + 1
    }

    roll_no_history = 0
    roll_init_history()

    $i = 0
    tsigidx = -1    // No buttons highlighted if combination is not supported
    while ($i < TIMESIGS_CNT) {
        if ($org.line == timesigs[$i] % 10 &&
            $org.dot == timesigs[$i] div 10)
        {
            tsigidx = $i
            break
        }
        $i + 1
    }

    tick_len = $org.wait
}
