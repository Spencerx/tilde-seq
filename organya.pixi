fn read_uint8($f) {
    ret(fgetc($f))
}

fn read_uint16($f) {
    $r = fgetc($f)
    $r + (fgetc($f) << 8)
    ret($r)
}

fn read_uint32($f) {
    $r = fgetc($f)
    $r + (fgetc($f) << 8)
    $r + (fgetc($f) << 16)
    $r + (fgetc($f) << 24)
    ret($r)
}

fn put_uint8($f, $val) {
    fputc($val, $f)
}

fn put_uint16($f, $val) {
    fputc($val & 0xff, $f)
    fputc(($val >> 8) & 0xff, $f)
}

fn put_uint32($f, $val) {
    fputc($val & 0xff, $f)
    fputc(($val >> 8) & 0xff, $f)
    fputc(($val >> 16) & 0xff, $f)
    fputc(($val >> 24) & 0xff, $f)
}

fn load_file($path) {
    $f = fopen($path, "rb")
    if ($f == 0) {
        ret("Cannot open file")
    }

    $magic = new(6, 1, INT8)
    fread($magic, 6, $f)

    if (strcmp($magic, "Org-02") != 0 && strcmp($magic, "Org-03") != 0) {
        fclose($f)
        ret("Unsupported Organya version, or not an Organya file at all")
    }

    $org = new()

    $org.wait = read_uint16($f)
    $org.line = read_uint8($f)
    $org.dot = read_uint8($f)
    $org.rpt_a = read_uint32($f)
    $org.rpt_b = read_uint32($f)

    $tracks = new(16, 1, INT32)
    $i = 0
    while ($i < 16) {
        $t = new()
        $t.freq = read_uint16($f)
        $t.instr = read_uint8($f)
        $t.pipi = read_uint8($f)
        $t.note_cnt = read_uint16($f)
        $tracks[$i] = $t
        $i + 1
    }

    $i = 0
    while ($i < 16) {
        $t = $tracks[$i]
        $n = $t.note_cnt

        // Create list
        $l = new($n, 1, INT32)
        $j = 0
        while ($j < $n) {
            $l[$j] = new()
            $j + 1
        }

        // Read data
        $j = 0
        while ($j < $n) {
            $l[$j].x = read_uint32($f)
            $j + 1
        }
        $j = 0
        while ($j < $n) {
            $l[$j].y = read_uint8($f)
            $j + 1
        }
        $j = 0
        while ($j < $n) {
            $l[$j].len = read_uint8($f)
            $j + 1
        }
        $j = 0
        while ($j < $n) {
            $l[$j].vol = read_uint8($f)
            $j + 1
        }
        $j = 0
        while ($j < $n) {
            $l[$j].pan = read_uint8($f)
            $j + 1
        }

        $t.note_list = $l
        $i + 1
    }

    $org.tracks = $tracks
    $org.succeeded = 1

    fclose($f)
    ret($org)
}

fn save_file($path) {
    $f = fopen($path, "wb")
    if ($f == 0) {
        ret("Cannot open file")
    }

    fputs("Org-03", $f)
    put_uint16($f, 16)
    put_uint8($f, roll_bar div roll_beat)
    put_uint8($f, roll_beat)
    put_uint32($f, 0)
    put_uint32($f, 0xffffffff)

    $i = 0
    while ($i < 16) {
        put_uint16($f, 1000)
        put_uint8($f, instruments[$i])
        put_uint8($f, 0)
        put_uint16($f, roll_tracks[$i].cnt)
        $i + 1
    }

    $i = 0
    while ($i < 16) {
        $t = roll_tracks[$i]
        $n = $t.cnt

        $j = 0
        while ($j < $n) {
            put_uint32($f, $t[$j].x)
            put_uint8($f, $t[$j].y)
            put_uint8($f, $t[$j].len)
            put_uint8($f, $t[$j].vol)
            put_uint8($f, $t[$j].pan)
            $j + 1
        }

        $i + 1
    }

    fclose($f)
}

fn menu_new_file() {
}

fn menu_open_file() {
    $path = file_dialog("Open", "org", "file_dialog_state")
    if ($path != -1) {
        $result = load_file($path)
        remove($path)
        if ($result.succeeded) {
            popularize_editor($result)
        } else {
            // TODO: Display error message
        }
    }
}

fn menu_save_file() {
    $path = file_dialog("Open", "org", "file_dialog_state")
    if ($path != -1) {
        save_file($path)
        remove($path)
    }
}

fn popularize_editor($org) {
    roll_clear()
    roll_no_history = 1

    roll_bar = $org.line * $org.dot
    roll_beat = $org.dot

    $i = 0
    while ($i < 16) {
        roll_ctrl = 0

        $n = $org.tracks[$i].note_cnt
        $l = $org.tracks[$i].note_list
        $j = 0
        while ($j < $n) {
            $note = $l[$j]
            add_note($i, $note.x, $note.y, $note.len, $note.vol, $note.pan)
            $j + 1
        }

        instruments[$i] = $org.tracks[$i].instr
        $i + 1
    }

    roll_no_history = 0
    roll_init_history()
}
