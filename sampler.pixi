osctab = new(100, 1, INT)
drumtab = new(42, 1, INT)

oscdata = load("Wave/Wave.dat")
if (get_xsize(oscdata) != 25600) { halt }

$i = 0
while ($i < 100) {
    osctab[$i] = new(256, 1, INT16)
    $j = 0
    while ($j < 256) {
        osctab[$i][$j] = oscdata[256 * $i + $j] * 256
        $j + 1
    }
    $i + 1
}

// Raw PCM, 22050 Hz, signed 8-bit, mono
$path = ""
$i = 0
while ($i < 42) {
    $real = clone(drum_names[$i])
    $len = get_xsize($real)
    if ($real[$len - 1] == '*') {
        $real[$len - 1] = '\0'
    }
    sprintf($path, "Wave/%s.wav", $real)
    $drumdata = load($path)
    $j = 0
    $n = get_xsize($drumdata)
    drumtab[$i] = new($n, 1, INT16)
    while ($j < $n) {
        drumtab[$i][$j] = $drumdata[$j] * 256
        $j + 1
    }
    $i + 1
}
remove($path)

// For little oscillographs only
fn osc_sample($instr, $phase) {
    ret(osctab[$instr][floor($phase * 256)] div 256)
}

fn drum_sample_phase($instr, $phase) {
    ret(drumtab[$instr][floor($phase * get_xsize(drumtab[$instr]))] div 256)
}

// Tracks 16 and 17 are for preview
track_freq = new(18, 1, INT16)  // in Hz; 0 means note off
track_vol = new(18, 1, INT8)    // [0, 255]
track_pan = new(18, 1, INT8)    // [0, 12]
track_step = new(18, 1, INT32)  // in samples; divide by 2^16; updated with freq
track_phase = new(18, 1, INT32) // in samples; divide by 2^16
override_instr = -1
clean(track_freq)

SMP_LEN = 256 * 65536

// -1 on any parameter means no change
fn note_on($tid, $freq, $vol, $pan) {
    if (track_freq[$tid] == 0) {
        // Reset phase at onset
        track_phase[$tid] = 0
    }
    if ($freq != -1) {
        track_freq[$tid] = $freq
        track_step[$tid] = round(SMP_LEN / 44100 * $freq)
    }
    if ($vol != -1) { track_vol[$tid] = $vol }
    if ($pan != -1) { track_pan[$tid] = $pan }
}

fn note_preview_instr($tid, $instr) {
    instruments[$tid] = $instr
    note_on($tid, 440, 0x80, 6)
}

fn note_off($tid) {
    track_freq[$tid] = 0
}

aud_buf0 = -1
aud_buf1 = -1
aud_buf2 = -1
aud_buf3 = -1

smpconf = new(SMP_INFO_SIZE, 1, INT32)

smpconf[SMP_DEST_OFF] = 0
smpconf[SMP_SRC_SIZE] = 0
smpconf[SMP_LOOP] = 0
smpconf[SMP_FLAGS] = SMP_FLAG_INTERP4

fn audio_callback($stream, $userdata, $channels, $frames,
    $output_time_in_system_ticks, $in_channels, $latency_in_frames)
{
    if (aud_buf0 == -1) {
        aud_buf0 = new($frames, 1, INT16)
        aud_buf1 = new($frames, 1, INT16)
        aud_buf2 = new($frames, 1, INT16)
        aud_buf3 = new($frames, 1, INT16)
    }

    clean(aud_buf0)
    clean(aud_buf1)

    smpconf[SMP_DEST_LEN] = $frames

    $i = 0
    while ($i < 18) {
        if (track_freq[$i] == 0) { $i + 1 continue }

        $vol = track_vol[$i]
        $pan = track_pan[$i]
        $delta = track_step[$i]

        $instr = override_instr
        if (override_instr == -1) { $instr = instruments[$i] }

        smpconf[SMP_DEST] = aud_buf2
        if ($i < 8 || $i == 16) {
            smpconf[SMP_SRC] = osctab[$instr]
            smpconf[SMP_LOOP_LEN] = 256 // Whole sample
        } else {
            smpconf[SMP_SRC] = drumtab[$instr]
            smpconf[SMP_LOOP_LEN] = 0   // No loop
        }
        smpconf[SMP_SRC_OFF_H] = track_phase[$i] >> 16
        smpconf[SMP_SRC_OFF_L] = track_phase[$i] & 0xffff
        smpconf[SMP_VOL1] = round($vol * 256 * (12 - $pan) / 12)
        smpconf[SMP_VOL2] = smpconf[SMP_VOL1]
        smpconf[SMP_DELTA] = $delta
        sampler(smpconf)
        op_cc(OP_SADD, aud_buf0, aud_buf2)

        smpconf[SMP_DEST] = aud_buf3
        smpconf[SMP_SRC_OFF_H] = track_phase[$i] >> 16
        smpconf[SMP_SRC_OFF_L] = track_phase[$i] & 0xffff
        smpconf[SMP_VOL1] = round($vol * 256 * $pan / 12)
        smpconf[SMP_VOL2] = smpconf[SMP_VOL1]
        sampler(smpconf)
        op_cc(OP_SADD, aud_buf1, aud_buf3)

        if ($i < 8 || $i == 16) {
            $increment = $frames * $delta
            track_phase[$i] =
                (track_phase[$i] + $increment) % SMP_LEN
        } else {
            $increment = $frames * $delta
            track_phase[$i] = track_phase[$i] + $increment
            if (track_phase[$i] >= get_xsize(drumtab[$instr])) {
                note_off($i)
            }
        }
        $i + 1
    }

    copy($channels[0], aud_buf0)
    copy($channels[1], aud_buf1)
    ret(1)
}

set_audio_callback(audio_callback, 0, 44100, INT16, 2, 0)

fn sampler_get_position() {
    ret(floor(get_timer(0) / tick_len))
}
