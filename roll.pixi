// Click/Drag: Draw/Edit
// Ctrl + drag: Pan
// Ctrl + scroll: Zoom

CELL_HEIGHT = 8
CELL_WIDTH = 13
MAX_TICKS = 990

roll_x = 0
roll_y = 0
roll_w = -1
roll_h = -1
roll_sel_h = 12

roll_px = 0
roll_py = 48 * CELL_HEIGHT

roll_ctrl = 0
roll_shift = 0
roll_activated = 0

roll_moving = 0
roll_mx = -1
roll_my = -1
roll_editing = -1
roll_eside = -1 // X coordinate of a fixed side for editing; -1 if moving

roll_selecting = 0
roll_sside = 0  // X coordinate of a fixed side for selection
roll_sfin = 0   // other side

roll_changed = 0

fn roll_mouse_down($x, $y) {
    if ($x >= roll_x && $x < roll_x + roll_w &&
        $y >= roll_y && $y < roll_y + roll_h)
    {
        roll_activated = 1
        if ($y < roll_y + roll_sel_h) {
            roll_selecting = 1
            roll_changed = 1
            if (roll_shift == 1) {
                roll_sside = roll_sfin
            }
            roll_sfin = floor((roll_px + $x - roll_x) / CELL_WIDTH)
            if (roll_shift == 0) {
                roll_sside = roll_sfin
            }
        } else {
            roll_moving = roll_ctrl
            if (roll_moving) {
                roll_mx = roll_px + $x
                roll_my = roll_py - $y
            } else {
                roll_mx = floor((roll_px + $x - roll_x) / CELL_WIDTH)
                roll_my = floor((roll_py - $y + roll_y) / CELL_HEIGHT)
                roll_locate_note(roll_mx, roll_my)
                if (roll_editing == -1) {
                    roll_editing = add_note(roll_mx, roll_my, 1)
                    roll_eside = roll_mx
                } else {
                    roll_mx = roll_editing.x - roll_mx
                }
                roll_changed = 1
            }
        }
    }
}

fn roll_mouse_move($x, $y) {
    if (roll_activated == 0) { ret }
    if (roll_moving) {
        roll_px = roll_mx - $x
        roll_py = roll_my + $y
    }
    if (roll_selecting) {
        roll_sfin = floor((roll_px + $x - roll_x) / CELL_WIDTH)
    }
    if (roll_editing != -1) {
        $mx = floor((roll_px + $x - roll_x) / CELL_WIDTH)
        $my = floor((roll_py - $y + roll_y) / CELL_HEIGHT)
        if (roll_eside == -1) {
            roll_editing.x = roll_mx + $mx
        } else {
            $x1 = $mx
            $x2 = roll_eside
            if ($x1 > $x2) {
                $t = $x1
                $x1 = $x2
                $x2 = $t
            }
            roll_editing.x = $x1
            roll_editing.len = $x2 - $x1 + 1
        }
        roll_editing.y = $my
    }
    roll_changed = 1
}

fn roll_mouse_up($x, $y) {
    if (roll_activated == 0) { ret }
    roll_activated = 0
    if (roll_editing != -1) {
        roll_monophonize(roll_editing)
        roll_changed = 1
    }
    roll_moving = 0
    roll_selecting = 0
    roll_editing = -1
}

fn roll_mouse_scrollup($x, $y) {
    if ($x >= roll_x && $x < roll_x + roll_w &&
        $y >= roll_y && $y < roll_y + roll_h)
    {
        if (roll_ctrl == 1 && CELL_HEIGHT > 3) {
            CELL_HEIGHT - 0.25
            roll_changed = 1
        }
        if (roll_ctrl == 0 && CELL_WIDTH > 2) {
            CELL_WIDTH - 0.25
            roll_changed = 1
        }
    }
}

fn roll_mouse_scrolldown($x, $y) {
    if ($x >= roll_x && $x < roll_x + roll_w &&
        $y >= roll_y && $y < roll_y + roll_h)
    {
        if (roll_ctrl == 1 && CELL_HEIGHT < 8) {
            CELL_HEIGHT + 0.25
            roll_changed = 1
        }
        if (roll_ctrl == 0 && CELL_WIDTH < 13) {
            CELL_WIDTH + 0.25
            roll_changed = 1
        }
    }
}

fn roll_clamp_p() {
    if (roll_px > MAX_TICKS * CELL_WIDTH - roll_w) {
        roll_px = MAX_TICKS * CELL_WIDTH - roll_w
    }
    if (roll_px < 0) {
        roll_px = 0
    }
    if (roll_py > 128 * CELL_HEIGHT) {
        roll_py = 128 * CELL_HEIGHT
    }
    if (roll_py < roll_h - 1) {
        roll_py = roll_h - 1
    }
}

roll_bar = 9
roll_beat = 3
roll_tracks = new(16, 1, INT)

$i = 0
while ($i < 16) {
    roll_tracks[$i] = new(4096, 1, INT)
    roll_tracks[$i].cnt = 0
    $i + 1
}

track_colours = new(16)
track_colours[0] = nord11
track_colours[1] = nord12
track_colours[2] = nord13
track_colours[3] = nord14
track_colours[4] = nord8
track_colours[5] = nord10
track_colours[6] = nord15
track_colours[7] = nord4

$i = 8
while ($i < 16) {
    track_colours[$i] =
        get_blend(track_colours[$i - 8], track_colours[($i + 1) % 8], 128)
    $i + 1
}

// Mask of selected tracks
roll_track_sel = 1

// A simple cache-like thing
roll_tid = 0
roll_notes = roll_tracks[0]

fn switch_track($t) {
    if (roll_ctrl) {
        if ((roll_track_sel ^ (1 << $t)) != 0) {
            roll_track_sel ^ (1 << $t)
        }
        // Take lowest bit
        $b = (roll_track_sel & -roll_track_sel)
        $t = 0
        // Count trailing zeros
        while ($b > 1) {
            $b div 2
            $t + 1
        }
    } else {
        roll_track_sel = (1 << $t)
    }
    roll_tid = $t
    roll_notes = roll_tracks[$t]
    roll_changed = 1
}

fn add_note($x, $y, $len) {
    $n = new()
    $n.x = $x
    $n.y = $y
    $n.len = $len

    roll_notes[roll_tracks[roll_tid].cnt] = $n
    roll_tracks[roll_tid].cnt + 1
    ret($n)
}

fn remove_note($i) {
    remove(roll_notes[$i])
    roll_tracks[roll_tid].cnt - 1
    roll_notes[$i] = roll_notes[roll_tracks[roll_tid].cnt]
}

// Finds whether a note exists at cell (x, y)
// and updates global variables <roll_editing> and <roll_eside>
fn roll_locate_note($x, $y) {
    $cnt = roll_tracks[roll_tid].cnt
    $i = 0
    roll_editing = -1
    while ($i < $cnt) {
        $n = roll_notes[$i]
        if ($n.y == $y && $n.x <= $x && $n.x + $n.len > $x) {
            roll_editing = $n
            roll_eside = -1
            if ($n.x == $x) { roll_eside = $n.x + $n.len - 1 }
            if ($n.x + $n.len - 1 == $x) { roll_eside = $n.x }
            break
        }
        $i + 1
    }
}

// Make the track monophonic w.r.t. a given newly-added note
fn roll_monophonize($m) {
    $cnt = roll_tracks[roll_tid].cnt
    $i = 0
    while ($i < $cnt) {
        $n = roll_notes[$i]
        if ($n != $m && $n.x + $n.len > $m.x && $m.x + $m.len > $n.x) {
            if ($n.x < $m.x) {
                if ($n.x + $n.len <= $m.x + $m.len) {
                    // Truncate from the right
                    $n.len = $m.x - $n.x
                } else {
                    // Split into two notes
                    add_note($m.x + $m.len, $n.y,
                        ($n.x + $n.len) - ($m.x + $m.len))
                    $n.len = $m.x - $n.x
                }
            } else {
                if ($n.x + $n.len <= $m.x + $m.len) {
                    // Remove
                    remove_note($i)
                    continue
                } else {
                    // Truncate from the left
                    $t = $n.x + $n.len
                    $n.x = $m.x + $m.len
                    $n.len = $t - $n.x
                }
            }
        }
        $i + 1
    }
}

fn draw_track($t, $x_sta, $x_fin, $y_sta, $y_fin) {
    $cnt = roll_tracks[$t].cnt
    $i = 0
    $col = track_colours[$t]

    while ($i < $cnt) {
        $n = roll_tracks[$t][$i]

        if ($n.x <= $x_fin && $n.x + $n.len - 1 >= $x_sta &&
            $n.y >= $y_sta && $n.y <= $y_fin)
        {
            fbox(roll_x + $n.x * CELL_WIDTH - roll_px + 1,
                roll_y - ($n.y + 1) * CELL_HEIGHT + roll_py,
                CELL_WIDTH * $n.len - 1,
                CELL_HEIGHT,
                $col)
        }

        $i + 1
    }
}

fn draw_roll() {
    roll_clamp_p()
    fbox(roll_x, roll_y, roll_w, roll_h, nord1)

    $x_sta = floor(roll_px / CELL_WIDTH)
    $x_fin = ceil((roll_px + roll_w) / CELL_WIDTH)
    $y_sta = floor((roll_py - roll_h) / CELL_HEIGHT)
    $y_fin = floor(roll_py / CELL_HEIGHT)

    $i = $y_sta
    while $i <= $y_fin {
        $ly = roll_y - ($i + 1) * CELL_HEIGHT + roll_py
        $pc = $i % 12
        if ($pc == 1 || $pc == 3 || $pc == 6 || $pc == 8 || $pc == 10) {
            fbox(roll_x, $ly, roll_w, CELL_HEIGHT, nord0)
        }
        if ($pc != 0) {
            line(roll_x, $ly, roll_x + roll_w - 1, $ly, nord2)
        }
        $i + 1
    }

    $i = $x_sta
    while $i <= $x_fin {
        $lx = roll_x + $i * CELL_WIDTH - roll_px
        if ($i % roll_bar == 0) {
            line($lx, roll_y, $lx, roll_y + roll_h, nord9)
        } else {
            if ($i % roll_beat == 0) {
                line($lx, roll_y, $lx, roll_y + roll_h - 1, nord3)
            } else {
                line($lx, roll_y, $lx, roll_y + roll_h - 1, nord2)
            }
        }
        $i + 1
    }

    $i = $y_sta
    while $i <= $y_fin {
        $ly = roll_y - ($i + 1) * CELL_HEIGHT + roll_py
        if ($i % 12 == 0) {
            line(roll_x, $ly + CELL_HEIGHT,
                roll_x + roll_w - 1, $ly + CELL_HEIGHT, nord10)
        }
        $i + 1
    }

    // Unselected tracks
    transp(64)
    $i = 15
    while ($i >= 0) {
        if ((roll_track_sel & (1 << $i)) == 0) {
            draw_track($i, $x_sta, $x_fin, $y_sta, $y_fin)
        }
        $i - 1
    }

    // Selected tracks
    transp(256)
    $i = 15
    while ($i >= 0) {
        if ((roll_track_sel & (1 << $i)) != 0) {
            draw_track($i, $x_sta, $x_fin, $y_sta, $y_fin)
        }
        $i - 1
    }

    $s = ""

    $i = $y_sta
    while $i <= $y_fin {
        $ly = roll_y - ($i + 1) * CELL_HEIGHT + roll_py
        if ($i % 12 == 0) {
            num_to_str($s, $i div 12)
            print($s, roll_x + 1, $ly + CELL_HEIGHT + 1, nord4, BOTTOM | LEFT)
        }
        $i + 1
    }

    // Selection range
    transp(128)
    fbox(roll_x, roll_y, roll_w, roll_sel_h, nord4)

    $x1 = roll_sside
    $x2 = roll_sfin
    if ($x1 > $x2) {
        $t = $x1
        $x1 = $x2
        $x2 = $t
    }
    transp(255)
    fbox(roll_x + $x1 * CELL_WIDTH - roll_px, roll_y,
        ($x2 - $x1 + 1) * CELL_WIDTH, roll_sel_h, nord9)
    transp(64)
    fbox(roll_x + $x1 * CELL_WIDTH - roll_px, roll_y + roll_sel_h,
        ($x2 - $x1 + 1) * CELL_WIDTH, roll_h - roll_sel_h, nord9)

    // Bar number
    transp(255)
    $i = $x_sta
    while $i <= $x_fin {
        $lx = roll_x + $i * CELL_WIDTH - roll_px
        if ($i % roll_bar == 0 &&
            (CELL_WIDTH >= 4 || $i % (roll_bar * 2) == 0))
        {
            num_to_str($s, $i div roll_bar)
            print($s, $lx + 1, roll_y + 1, nord5, TOP | LEFT)
        }
        $i + 1
    }
}
